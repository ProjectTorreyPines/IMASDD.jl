var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Base","page":"API Reference","title":"Base","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"info\nunits\ncoordinates\naccess_log\ngetproperty\nisempty\nsetproperty!\nlazycopy\nindex\nkeys_no_missing\nresize!\ndeleteat!\nismissing\ndiff\ntop_ids\ntop_dd\nparent\ngoto\nleaves\nfilled_ids_fields\npaths\nselective_copy!\nselective_delete!","category":"page"},{"location":"api/#IMASDD.info","page":"API Reference","title":"IMASDD.info","text":"info(uloc::String, extras::Bool=true)\n\nReturn information of a node in the IMAS data structure, possibly including extra structures\n\n\n\n\n\ninfo(@nospecialize(ids::Union{IDS,IDSvector}), field::Symbol)::Dict{String,Any}\n\nReturn information of a filed of an IDS\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.units","page":"API Reference","title":"IMASDD.units","text":"units(uloc::String)::String\n\nReturn string with units for a given IDS location\n\n\n\n\n\nunits(ids::IDS, field::Symbol)::String\n\nReturn string with units for a given IDS field\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.coordinates","page":"API Reference","title":"IMASDD.coordinates","text":"coordinates(@nospecialize(ids::IDS), field::Symbol; coord_leaves::Union{Nothing,Vector{Symbol}}=nothing)\n\nReturn two lists, one of coordinate names and the other with their values in the data structure\n\nCoordinate value is nothing when the data does not have a coordinate\n\nCoordinate value is missing if the coordinate is missing in the data structure\n\nUse coord_leaves to override fetching coordinates of a given field\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.access_log","page":"API Reference","title":"IMASDD.access_log","text":"IMASDD.access_log\n\nIMASDD.access_log.enable = true / false\n\n@show IMASDD.access_log\n\nempty!(IMASDD.access_log) # to reset\n\nTrack access to the data dictionary\n\n\n\n\n\n","category":"constant"},{"location":"api/#Base.getproperty","page":"API Reference","title":"Base.getproperty","text":"getproperty(@nospecialize(ids::IDS), field::Symbol)\n\nReturn IDS value for requested field\n\n\n\n\n\ngetproperty(@nospecialize(ids::IDS), field::Symbol, @nospecialize(default::Any))\n\nReturn IDS value for requested field or default if field is missing\n\nNOTE: This is useful because accessing a missing field in an IDS would raise an error\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.isempty","page":"API Reference","title":"Base.isempty","text":"isempty(@nospecialize(ids::IDSvector))::Bool\n\nreturns true if IDSvector is empty\n\n\n\n\n\nisempty(@nospecialize(ids::IDS); include_expr::Bool=false, eval_expr::Bool=false, refs::Bool=true)::Bool\n\nReturns true if none of the IDS fields downstream have data (or expressions)\n\nNOTE: By default it does not include nor evaluate expressions\n\n\n\n\n\nisempty(@nospecialize(ids::IDS), field::Symbol; include_expr::Bool=false, eval_expr::Bool=false)::Bool\n\nReturns true if the ids field has no data (or expression)\n\nNOTE: By default it does not include nor evaluate expressions\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.setproperty!","page":"API Reference","title":"Base.setproperty!","text":"Base.setproperty!(ids::IDS, field::Symbol, v; skip_non_coordinates::Bool=false, error_on_missing_coordinates::Bool=true)\n\n\n\n\n\nBase.setproperty!(@nospecialize(ids::IDS), field::Symbol, v::AbstractArray{<:IDS}; skip_non_coordinates::Bool=false, error_on_missing_coordinates::Bool=true)\n\nHandle setproperty of entire vectors of IDS structures at once (ids.field is of type IDSvector)\n\n\n\n\n\nBase.setproperty!(\n    @nospecialize(ids::IDS),\n    field::Symbol,\n    v::Union{AbstractRange,StaticArraysCore.SVector,StaticArraysCore.MVector};\n    skip_non_coordinates::Bool=false,\n    error_on_missing_coordinates::Bool=true\n)\n\nConvert abstract ranges and static arrays to vectors\n\n\n\n\n\nBase.setproperty!(@nospecialize(ids::IDS), field::Symbol, v::AbstractArray; skip_non_coordinates::Bool=false, error_on_missing_coordinates::Bool=true)\n\nEnsures coordinates are set before the data that depends on those coordinates. If skip_non_coordinates is set, then fields that are not coordinates will be silently skipped.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.lazycopy","page":"API Reference","title":"IMASDD.lazycopy","text":"lazycopy(@nospecialize(ids::IDS))\n\nreturns a new IDS with reference set to the input ids\n\n\n\n\n\nlazycopy(T::DataType, @nospecialize(ids::IDS))\n\nreturns a new IDS of type T with reference set to the input ids\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.index","page":"API Reference","title":"IMASDD.index","text":"index(@nospecialize(ids::IDSvectorElement))\n\nReturns index of the IDSvectorElement in the parent IDSvector\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.keys_no_missing","page":"API Reference","title":"IMASDD.keys_no_missing","text":"keys_no_missing(@nospecialize(ids::IDS); include_expr::Bool=true, eval_expr::Bool=false)\n\nReturns generator of fields with data in a IDS\n\nNOTE: By default it includes expressions, but does not evaluate them\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.resize!","page":"API Reference","title":"Base.resize!","text":"Base.resize!(@nospecialize(ids::IDSvector{T}), condition::Pair{String}, conditions::Pair{String}...; wipe::Bool=true, error_multiple_matches::Bool=true)::T where {T<:IDSvectorElement}\n\nResize if a set of conditions are not met.\n\nIf wipe=true and an entry matching the condition is found, then the content of the matching IDS is emptied.\n\nEither way, the IDS is populated with the conditions.\n\nNOTE: error_multiple_matches will delete all extra entries matching the conditions.\n\nReturns the selected IDS\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.deleteat!","page":"API Reference","title":"Base.deleteat!","text":"Base.deleteat!(@nospecialize(ids::T), condition::Pair{String}, conditions::Pair{String}...)::T where {T<:IDSvector}\n\nIf an entry matching the condition is found, then the content of the matching IDS is emptied\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.ismissing","page":"API Reference","title":"Base.ismissing","text":"Base.ismissing(@nospecialize(ids::IDS), field::Symbol)::Bool\n\nreturns true/false if field is missing in IDS\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.diff","page":"API Reference","title":"Base.diff","text":"Base.diff(\n    @nospecialize(ids1::T),\n    @nospecialize(ids2::T);\n    tol::Float64=1E-2,\n    recursive::Bool=true,\n    verbose::Bool=false) where {T<:IDS}\n\nCompares two IDSs and returns dictionary with differences\n\nNOTE: This function does not evaluate expressions (use freeze() on the IDSs to compare values instead of functions)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.top_ids","page":"API Reference","title":"IMASDD.top_ids","text":"top_ids(@nospecialize(ids::Union{IDS,IDSvector}))::Union{<:IDS,Nothing}\n\nReturn top-level IDS in the hierarchy and nothing if top level is not a top-level IDS\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.top_dd","page":"API Reference","title":"IMASDD.top_dd","text":"top_dd(@nospecialize(ids::Union{IDS,IDSvector}))::Union{<:DD,Nothing}\n\nReturn top-level dd in the hierarchy, and nothing if top level is not dd\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.parent","page":"API Reference","title":"Base.parent","text":"parent(ids::Union{IDS,IDSvector}; IDS_is_absolute_top::Bool=true)\n\nReturn parent IDS/IDSvector in the hierarchy\n\nIf IDS_is_absolute_top=true then returns nothing instead of dd()\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.goto","page":"API Reference","title":"IMASDD.goto","text":"goto(@nospecialize(ids::Union{IDS,IDSvector}), loc::String)\n\nReach location in a given IDS\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.leaves","page":"API Reference","title":"IMASDD.leaves","text":"leaves(@nospecialize(ids::IDS))\n\nReturns iterator with (filled) leaves in the IDS\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.filled_ids_fields","page":"API Reference","title":"IMASDD.filled_ids_fields","text":"filled_ids_fields(@nospecialize(ids::IDS); eval_expr::Bool=false)::Vector{Tuple{<:IDS,Symbol}}\n\nReturns a vector with tuples pointing to all the (ids, field) that have data downstream\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.paths","page":"API Reference","title":"IMASDD.paths","text":"paths(@nospecialize(ids::IDS); eval_expr::Bool=false)\n\nReturns the locations in the IDS that have data downstream\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.selective_copy!","page":"API Reference","title":"IMASDD.selective_copy!","text":"selective_copy!(@nospecialize(h_in::IDS), @nospecialize(h_out::IDS), path::Vector{String}, time0::Float64)\n\nCopies the content of a path from one IDS to another (if the path exists) at a given time0\n\nNOTE:\n\nthe path is a i2p(ulocation)\nif time0 is NaN then all times are retained\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.selective_delete!","page":"API Reference","title":"IMASDD.selective_delete!","text":"selective_delete!(@nospecialize(h_in::IDS), path::Vector{String})\n\nDeletes a path from one IDS\n\nNOTE:\n\nthe path is a i2p(ulocation)\n\n\n\n\n\n","category":"function"},{"location":"api/#IO","page":"API Reference","title":"IO","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"dict2imas\nimas2dict\njson2imas\njstr2imas\nimas2json\nhdf2imas\nimas2hdf\nh5i2imas\nimas2h5i","category":"page"},{"location":"api/#IMASDD.dict2imas","page":"API Reference","title":"IMASDD.dict2imas","text":"dict2imas(dct::AbstractDict, @nospecialize(ids::IDS); verbose::Bool=false)\n\nPopulate IMAS data structure ids based on data contained in Julia dictionary dct.\n\nArguments\n\nverbose::Bool=false: print structure hierarchy as it is filled\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.imas2dict","page":"API Reference","title":"IMASDD.imas2dict","text":"imas2dict(ids::Union{IDS,IDSvector}; freeze::Bool=true, strict::Bool=false)\n\nPopulate Julia structure of dictionaries and vectors with data from IMAS data structure ids\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.json2imas","page":"API Reference","title":"IMASDD.json2imas","text":"json2imas(filename::AbstractString, @nospecialize(ids::IDS)=dd(); error_on_missing_coordinates::Bool=true, verbose::Bool=false)::IDS\n\nLoad the IMAS data structure from a JSON file with given filename\n\nArguments\n\nerror_on_missing_coordinates: boolean to raise an error if coordinate is missing\nverbose: print structure hierarchy as it is filled\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.jstr2imas","page":"API Reference","title":"IMASDD.jstr2imas","text":"jstr2imas(json_string::String, @nospecialize(ids::IDS)=dd(); error_on_missing_coordinates::Bool=true, verbose::Bool=false)::IDS\n\nLoad the IMAS data structure from a JSON string\n\nArguments\n\nerror_on_missing_coordinates: boolean to raise an error if coordinate is missing\nverbose: print structure hierarchy as it is filled\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.imas2json","page":"API Reference","title":"IMASDD.imas2json","text":"imas2json(@nospecialize(ids::Union{IDS,IDSvector}), filename::AbstractString; freeze::Bool=true, strict::Bool=false, indent::Int=0, kw...)\n\nSave the IMAS data structure to a JSON file with given filename.\n\nArguments\n\nfreeze evaluates expressions\nstrict dumps fields that are strictly in ITER IMAS only\nkw... arguments are passed to the JSON.print function\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.hdf2imas","page":"API Reference","title":"IMASDD.hdf2imas","text":"hdf2imas(filename::AbstractString; error_on_missing_coordinates::Bool=true, kw...)\n\nLoad data from a HDF5 file generated by OMAS Python platform (ie. hierarchical HDF5)\n\nArguments\n\nkw... arguments are passed to the HDF5.h5open function\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.imas2hdf","page":"API Reference","title":"IMASDD.imas2hdf","text":"imas2hdf(@nospecialize(ids::Union{IDS,IDSvector}), filename::AbstractString; freeze::Bool=true, strict::Bool=false, kw...)\n\nSave the IMAS data structure to a OMAS HDF5 file with given filename (ie. hierarchical HDF5)\n\nArguments\n\nkw... arguments are passed to the HDF5.h5open function\nfreeze evaluates expressions\nstrict dumps fields that are strictly in ITER IMAS only\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.h5i2imas","page":"API Reference","title":"IMASDD.h5i2imas","text":"h5i2imas(filename::AbstractString, @nospecialize(ids::IDS)=dd(); kw...)::IDS\n\nLoad data from a HDF5 file generated by IMAS platform (ie. tensorized HDF5)\n\nArguments\n\nkw... arguments are passed to the HDF5.h5open function\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.imas2h5i","page":"API Reference","title":"IMASDD.imas2h5i","text":"imas2h5i(@nospecialize(ids::Union{IDS,IDSvector}), filename::AbstractString;\n    freeze::Bool=true, strict::Bool=false, run::Int=0, shot::Int=0, hdf5_backend_version::String=\"1.0\", kw...)\n\nSave data to a HDF5 file generated by IMAS platform (ie. tensorized HDF5)\n\nArguments\n\nkw... arguments are passed to the HDF5.h5open function\nfreeze evaluates expressions\nstrict dumps fields that are strictly in ITER IMAS only\nrun, shot, hdf5_backend_version arguments are used to set the HDF5 attributes\n\n\n\n\n\n","category":"function"},{"location":"api/#Time","page":"API Reference","title":"Time","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"global_time\nset_time_array\nget_time_array\n@ddtime\nlast_time\nlast_global_time\nnew_timeslice!\nretime!","category":"page"},{"location":"api/#IMASDD.global_time","page":"API Reference","title":"IMASDD.global_time","text":"global_time(ids::Union{IDS,IDSvector})\n\nGet the dd.global_time of a given IDS\n\nIf top-level dd cannot be reached then returns Inf\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.set_time_array","page":"API Reference","title":"IMASDD.set_time_array","text":"set_time_array(@nospecialize(ids::IDS), field::Symbol, value)\n\nSet value of a time-dependent array at the dd.global_time\n\n\n\n\n\nset_time_array(@nospecialize(ids::IDS), field::Symbol, time0::Float64, value)\n\nSet value of a time-dependent array at time0\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.get_time_array","page":"API Reference","title":"IMASDD.get_time_array","text":"get_time_array(ids, field)\n\nGet data from a time-dependent array at the dd.global_time\n\n\n\n\n\nget_time_array(@nospecialize(ids::IDS), field::Symbol, time0::Float64, scheme::Symbol=:linear)\n\nGet data from time dependent array\n\nNOTE: logic for @ddtime array handling:\n\nscheme (i) interpolation between array bounds\nconstant (c) extrapolation within bounds of time array\nerror (e) when time0 is before minimum(time)\n\nFor example:\n\ntime:   -oooo-\ndata:   -o-o--\nddtime: eiiicc\n\n\n\n\n\nget_time_array(@nospecialize(ids::IDS), field::Symbol, time0::Vector{Float64}, scheme::Symbol=:linear)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.@ddtime","page":"API Reference","title":"IMASDD.@ddtime","text":"@ddtime( X.Y )\n\nGet data from time dependent array. Equivalent to:\n\nget_time_array(X, :Y)\n\nand\n\n@ddtime( X.Y = V)\n\nSet data in a time dependent array. Equivalent to:\n\nset_time_array(X, :Y, V)\n\n\n\n\n\n","category":"macro"},{"location":"api/#IMASDD.last_time","page":"API Reference","title":"IMASDD.last_time","text":"last_time(dd::DD)::Float64\n\nReturns the last time referenced in all the IDSs dd.XXX.time vectors (including dd.global_time)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.last_global_time","page":"API Reference","title":"IMASDD.last_global_time","text":"last_global_time(dd::DD)::Float64\n\nReturns the last time referenced in all the IDSs dd.XXX.time vectors (including dd.global_time)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.new_timeslice!","page":"API Reference","title":"IMASDD.new_timeslice!","text":"new_timeslice!(ids::IDS, time0::Float64)\n\nRecursively appends a lazycopy at time time0 of the last time-slice of all time-dependent array structures under a given ids\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.retime!","page":"API Reference","title":"IMASDD.retime!","text":"retime!(ids::IDS, time0::Float64)\n\nRecursively change the time of the last time-slices or last time-depedent vector elements in a IDS\n\n\n\n\n\n","category":"function"},{"location":"api/#Math","page":"API Reference","title":"Math","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"interp1d\nextrap1d\ngradient","category":"page"},{"location":"api/#IMASDD.interp1d","page":"API Reference","title":"IMASDD.interp1d","text":"interp1d(x, y, scheme::Symbol=:linear)\n\nOne dimensional curve interpolations with sheme [:constant, :linear, :quadratic, :cubic, :pchip, :lagrange]\n\nNOTE: this interpolation method will extrapolate\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.extrap1d","page":"API Reference","title":"IMASDD.extrap1d","text":"extrap1d(itp::DataInterpolations.AbstractInterpolation; first=:extrapolate, last=:extrapolate) where {T<:Real}\n\nfirst and last can be [:extrapolate, :flat, --value--] affect how the extrapolation is done at the either end of the array\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASDD.gradient","page":"API Reference","title":"IMASDD.gradient","text":"gradient(coord::AbstractVector{C}, arr::AbstractVector{A}; method::Symbol=:second_order) where {C<:Real, A<:Real}\n\nThe finite difference gradient. The returned gradient has the same shape as the input array.\n\nmethod of the gradient can be one of [:thirdorder, :secondorder, :central, :backward, :forward]\n\nFor :central the gradient is computed using second order accurate central differences in the interior points and first order accurate one-sides (forward or backward) differences at the boundaries.\n\nFor :second_order the gradient is computed using second order accurate central differences in the interior points, and 2nd order differences at the boundaries.\n\nFor :third_order the gradient is computed from the cubic spline passing through the points\n\n\n\n\n\ngradient(coord1::AbstractVector, coord2::AbstractVector, mat::Matrix, dim::Int; method::Symbol=:second_order)\n\nFinite difference method of the gradient: [:second_order, :central, :backward, :forward]\n\nCan be applied to either the first (dim=1) or second (dim=2) dimension\n\n\n\n\n\ngradient(coord1::AbstractVector, coord2::AbstractVector, mat::Matrix)\n\nFinite difference method of the gradient: [:second_order, :central, :backward, :forward]\n\nComputes the gradient in both dimensions\n\n\n\n\n\n","category":"function"},{"location":"#IMASDD.jl","page":"IMASDD.jl","title":"IMASDD.jl","text":"","category":"section"},{"location":"","page":"IMASDD.jl","title":"IMASDD.jl","text":"IMASDD.jl is a Julia package that allows manipulating data according to the ITER Modeling and Analysis Suite (IMAS) data schema, also known as the ITER Physics Data Model (PDM) [Imbeaux NF 2015]. Importantly, IMASDD.jl does not use the native IMAS API, but instead implements everything natively in Julia.","category":"page"},{"location":"#Data-schema","page":"IMASDD.jl","title":"Data schema","text":"","category":"section"},{"location":"","page":"IMASDD.jl","title":"IMASDD.jl","text":"IMAS structures data around nearly 80 hierarchically ordered Interface Data Structures (IDSs). These IDSs span various modeling topics like equilibrium, kinetic profiles, and sources, as well as experimental areas including magnets, diagnostics, and heating systems. Each IDS encapsulates the necessary data pertaining to its associated plasma or tokamak subsystem. Within an IDS, every quantity is clearly described, specifying units, coordinates, numerical type. These standardized IDSs to ensure consistent data exchange across code components, and facilitate code coupling in fusion Tokamak integrated simulations.","category":"page"},{"location":"#Time","page":"IMASDD.jl","title":"Time","text":"","category":"section"},{"location":"","page":"IMASDD.jl","title":"IMASDD.jl","text":"A standout feature of IMASDD.jl is its ability to easily manage IDSs that are non-homogeneous in time. This capability is crucial for facilitating the creation of comprehensive time-dependent simulations. The process is streamlined by introducing a concept of a global_time. When this global time of interest is defined, the data structure's API takes charge. Instead of the user having to manually decipher the time coordinate for each accessed element, the API determines it and accordingly interpolates (or updates, if writing) the data for that specific time. Moreover, for efficient management of extensive time series, IMAS.jl employs a memory-saving strategy: it stores only the differences between consecutive time slices within an array of structures, rather than the entirety of each slice.","category":"page"},{"location":"#I/O","page":"IMASDD.jl","title":"I/O","text":"","category":"section"},{"location":"","page":"IMASDD.jl","title":"IMASDD.jl","text":"The IMASDD.jl package also retains the ability to interoperate with the original IMAS infrastructure by directly reading and writing HDF5 binary files using the native \"tensorized\" IMAS data format [Meneghini NF 2020]. In addition IMASDD.jl supports reading and writing data in the JSON ASCII format, which has proven to find broad adoption among different projects that use the OMAS Python library. The ability to I/O data in these data files does not depend on either the original IMAS infrastructure nor OMAS being installed","category":"page"}]
}
